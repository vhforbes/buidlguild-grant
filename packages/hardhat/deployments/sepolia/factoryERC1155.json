{
  "address": "0x7ee88263dF56F0bC1f810CAe7b4A7c91129e1d47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daysToAdd",
          "type": "uint256"
        }
      ],
      "name": "calcDaysForEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "dataEvento",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "localEvento",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "logo",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "banner",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalArrecadado",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalArrecadadoDesejado",
              "type": "uint256"
            }
          ],
          "internalType": "struct token1155.dadosEvento",
          "name": "data_",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "usdContract_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ticketsPrice_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ticketsMaxSupply_",
          "type": "uint256[]"
        }
      ],
      "name": "createEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa37ca39993a23ca19664a104c3b8c4a752de5b751ccd4c126d937c055ddf8ad5",
  "receipt": {
    "to": null,
    "from": "0xb97064cA4C134897192aF09D97C50E389D8FCF93",
    "contractAddress": "0x7ee88263dF56F0bC1f810CAe7b4A7c91129e1d47",
    "transactionIndex": 35,
    "gasUsed": "3051582",
    "logsBloom": "0x
    "blockHash": "0x35b381a80f40c4ce2cf30beef5be2c33764e003dd2cda3b13e739154a21dbc0e",
    "transactionHash": "0xa37ca39993a23ca19664a104c3b8c4a752de5b751ccd4c126d937c055ddf8ad5",
    "logs": [],
    "blockNumber": 6204842,
    "cumulativeGasUsed": "7020632",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c059aba2ccea1dab88b2f1f8ff9b527",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysToAdd\",\"type\":\"uint256\"}],\"name\":\"calcDaysForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataEvento\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"localEvento\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"banner\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalArrecadado\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalArrecadadoDesejado\",\"type\":\"uint256\"}],\"internalType\":\"struct token1155.dadosEvento\",\"name\":\"data_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"usdContract_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketsPrice_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketsMaxSupply_\",\"type\":\"uint256[]\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Contract.sol\":\"factoryERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Contract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract token1155 is ERC1155 {\\n    address public owner;\\n    string public name;\\n    string public symbol;\\n    address usdContract;\\n\\n    mapping(uint256 => uint256) ticketPrice;\\n\\n    mapping(uint256 => uint256) ticketsMaxSupply;\\n    mapping(uint256 => uint256) ticketTotalSupply;\\n\\n    struct dadosEvento {\\n        string description;\\n        uint256 dataEvento;\\n        string localEvento;\\n        string logo;\\n        string banner;\\n        uint256 totalArrecadado;\\n        uint256 totalArrecadadoDesejado;\\n    }\\n\\n    dadosEvento public data;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ERRO: !owner\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        dadosEvento memory data_,\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_,\\n        address usdContract_,\\n        uint256[] memory ticketsPrice_,\\n        uint256[] memory ticketsMaxSupply_\\n    ) ERC1155(\\\"\\\") {\\n        data = data_;\\n        owner = owner_;\\n        name = name_;\\n        symbol = symbol_;\\n        usdContract = usdContract_;\\n\\n        for (uint256 i = 0; i < ticketsPrice_.length; i++) {\\n            ticketPrice[i + 1] = ticketsPrice_[i];\\n            ticketsMaxSupply[i + 1] = ticketsMaxSupply_[i];\\n        }\\n    }\\n\\n    function mint(address account, uint256 id, uint256 amount) internal {\\n        require(ticketTotalSupply[id] + amount <= ticketsMaxSupply[id], \\\"ERRO: Lote esgotado\\\");\\n        ticketTotalSupply[id] += amount;\\n        _mint(account, id, amount, \\\"\\\");\\n    }\\n\\n    function buyTicket(uint256 id, uint256 amount) external {\\n        ERC20 usd = ERC20(usdContract);\\n        require(usd.balanceOf(msg.sender) >= ticketPrice[id], \\\"dont have balance\\\");\\n\\n        uint256 price = ticketPrice[id] * amount;\\n\\n        bool usdTransfer = usd.transferFrom(msg.sender, address(this), price);\\n        require(usdTransfer);\\n\\n        mint(msg.sender, id, amount);\\n        data.totalArrecadado += price;\\n    }\\n\\n    function userExtorno(uint256 id, uint256 amount) external {\\n        ERC20 usd = ERC20(usdContract);\\n        require(balanceOf(msg.sender, id) <= amount, \\\"ERRO: quantidade para o saque invalida\\\");\\n        require(data.totalArrecadado < data.totalArrecadadoDesejado, \\\"ERRO: evento viabilizado, extorno nao e possivel\\\");\\n        require(block.timestamp >= data.dataEvento, \\\"ERRO: o evento ainda nao atingiu sua data limite\\\");\\n        uint256 price = ticketPrice[id] * amount;\\n        _burn(msg.sender, id, amount);\\n        usd.transfer(msg.sender, price);\\n    }\\n\\n    function viewUserExtorno() external view returns (bool) {\\n        bool verify1 = data.totalArrecadado < data.totalArrecadadoDesejado;\\n        bool verify2 = block.timestamp >= data.dataEvento;\\n        return verify1 && verify2;\\n    }\\n\\n    function ownerCollect() external onlyOwner {\\n        ERC20 usd = ERC20(usdContract);\\n        require(data.totalArrecadado >= data.totalArrecadadoDesejado, \\\"ERRO: total a ser arrecadado nao foi atingido\\\");\\n        uint256 total = usd.balanceOf(address(this));\\n        usd.transfer(owner, total);\\n    }\\n\\n    function viewOwnerCollect() external view returns (bool) {\\n        return data.totalArrecadado >= data.totalArrecadadoDesejado;\\n    }\\n\\n    function viewTicketPrice(uint256 id_) public view returns (uint256) {\\n        return ticketPrice[id_];\\n    }\\n\\n    function viewTicketTotalSupply(uint256 id_) public view returns (uint256) {\\n        return ticketTotalSupply[id_];\\n    }\\n\\n    function viewTicketMaxSupply(uint256 id_) public view returns (uint256) {\\n        return ticketsMaxSupply[id_];\\n    }\\n\\n    function viewTicketData(uint256 id_) public view returns (uint256, uint256, uint256) {\\n        return (viewTicketPrice(id_), viewTicketTotalSupply(id_), viewTicketMaxSupply(id_));\\n    }\\n\\n    function viewAllData() public view returns (dadosEvento memory, address, string memory, string memory) {\\n        return (data, owner, name, symbol);\\n    }\\n}\\n\\n//[\\\"descricao teste\\\",1715456792,\\\"Rua dos bobos, N 0\\\",\\\"url da logo\\\",\\\"url do banner\\\",0,50]\\n//0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\\n//nomeTeste\\n//NT\\n\\n//[10,20,30]\\n//[2,5,10]\\n\\ncontract factoryERC1155 {\\n    address[] collections;\\n\\n    function viewCollections() public view returns (address[] memory) {\\n        return collections;\\n    }\\n\\n    function calcDaysForEvent(uint256 daysToAdd) public view returns (uint256) {\\n        uint256 secondsToAdd = daysToAdd * 1 days;\\n        return block.timestamp + secondsToAdd;\\n    }\\n\\n    function createEvent(\\n        token1155.dadosEvento memory data_,\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_,\\n        address usdContract_,\\n        uint256[] memory ticketsPrice_,\\n        uint256[] memory ticketsMaxSupply_\\n    ) public {\\n        token1155.dadosEvento memory newData = token1155.dadosEvento({\\n            description: data_.description,\\n            dataEvento: calcDaysForEvent(data_.dataEvento),\\n            localEvento: data_.localEvento,\\n            logo: data_.logo,\\n            banner: data_.banner,\\n            totalArrecadado: data_.totalArrecadado,\\n            totalArrecadadoDesejado: data_.totalArrecadadoDesejado\\n        });\\n\\n        token1155 newEvent =\\n            new token1155(newData, owner_, name_, symbol_, usdContract_, ticketsPrice_, ticketsMaxSupply_);\\n        collections.push(address(newEvent));\\n    }\\n}\\n\\ncontract usdTeste is ERC20 {\\n    constructor(address user1, address user2) ERC20(\\\"USD\\\", \\\"USD\\\") {\\n        _mint(user1, 10000 * 10 ** decimals());\\n        _mint(user2, 10000 * 10 ** decimals());\\n    }\\n\\n    function mint(address user, uint256 amount) public {\\n        _mint(user, amount * 10 ** decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x6cac303303caff1c4f117cd48af46016fcb3e0d8b65fedf88d3c0c1e4c5fe66c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613645806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80633a28c0e0146200004b57806367eb08001462000064578063f602808f1462000086575b600080fd5b620000626200005c366004620004ba565b620000ac565b005b6200006e620001a8565b6040516200007d9190620005c1565b60405180910390f35b6200009d6200009736600462000610565b6200020c565b6040519081526020016200007d565b60006040518060e0016040528089600001518152602001620000d28a602001516200020c565b81526020018960400151815260200189606001518152602001896080015181526020018960a0015181526020018960c001518152509050600081888888888888604051620001209062000233565b620001329796959493929190620006af565b604051809103906000f0801580156200014f573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055505050505050505050565b606060008054806020026020016040519081016040528092919081815260200182805480156200020257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001e3575b5050505050905090565b6000806200021e8362015180620007f2565b90506200022c814262000812565b9392505050565b612de7806200082983390190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156200027d576200027d62000241565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620002af57620002af62000241565b604052919050565b600082601f830112620002c957600080fd5b813567ffffffffffffffff811115620002e657620002e662000241565b620002fb601f8201601f191660200162000283565b8181528460208386010111156200031157600080fd5b816020850160208301376000918101602001919091529392505050565b600060e082840312156200034157600080fd5b6200034b62000257565b9050813567ffffffffffffffff808211156200036657600080fd5b6200037485838601620002b7565b83526020840135602084015260408401359150808211156200039557600080fd5b620003a385838601620002b7565b60408401526060840135915080821115620003bd57600080fd5b620003cb85838601620002b7565b60608401526080840135915080821115620003e557600080fd5b50620003f484828501620002b7565b60808301525060a082013560a082015260c082013560c082015292915050565b80356001600160a01b03811681146200042c57600080fd5b919050565b600082601f8301126200044357600080fd5b8135602067ffffffffffffffff82111562000462576200046262000241565b8160051b6200047382820162000283565b92835284810182019282810190878511156200048e57600080fd5b83870192505b84831015620004af5782358252918301919083019062000494565b979650505050505050565b600080600080600080600060e0888a031215620004d657600080fd5b873567ffffffffffffffff80821115620004ef57600080fd5b620004fd8b838c016200032e565b98506200050d60208b0162000414565b975060408a01359150808211156200052457600080fd5b620005328b838c01620002b7565b965060608a01359150808211156200054957600080fd5b620005578b838c01620002b7565b95506200056760808b0162000414565b945060a08a01359150808211156200057e57600080fd5b6200058c8b838c0162000431565b935060c08a0135915080821115620005a357600080fd5b50620005b28a828b0162000431565b91505092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015620006045783516001600160a01b031683529284019291840191600101620005dd565b50909695505050505050565b6000602082840312156200062357600080fd5b5035919050565b6000815180845260005b81811015620006525760208185018101518683018201520162000634565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015620006a45781518752958201959082019060010162000686565b509495945050505050565b60e081526000885160e080840152620006cd6101c08401826200062a565b905060208a015161010084015260408a015160df198085840301610120860152620006f983836200062a565b925060608c0151915080858403016101408601526200071983836200062a565b925060808c015191508085840301610160860152506200073a82826200062a565b91505060a08a015161018084015260c08a01516101a084015262000769602084018a6001600160a01b03169052565b82810360408401526200077d81896200062a565b905082810360608401526200079381886200062a565b6001600160a01b0387166080850152905082810360a0840152620007b8818662000672565b905082810360c0840152620007ce818562000672565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200080c576200080c620007dc565b92915050565b808201808211156200080c576200080c620007dc56fe60806040523480156200001157600080fd5b5060405162002de738038062002de783398101604081905262000034916200046f565b6040805160208101909152600081526200004e81620001d1565b5086518790600a90819062000064908262000604565b50602082015160018201556040820151600282019062000085908262000604565b50606082015160038201906200009c908262000604565b5060808201516004820190620000b3908262000604565b5060a0820151600582015560c090910151600690910155600380546001600160a01b0319166001600160a01b0388161790556004620000f3868262000604565b50600562000102858262000604565b50600680546001600160a01b0319166001600160a01b03851617905560005b8251811015620001c357828181518110620001405762000140620006d0565b6020026020010151600760008360016200015b9190620006fc565b815260200190815260200160002081905550818181518110620001825762000182620006d0565b6020026020010151600860008360016200019d9190620006fc565b815260208101919091526040016000205580620001ba8162000718565b91505062000121565b505050505050505062000734565b6002620001df828262000604565b5050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156200021e576200021e620001e3565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200024f576200024f620001e3565b604052919050565b600082601f8301126200026957600080fd5b81516001600160401b03811115620002855762000285620001e3565b60206200029b601f8301601f1916820162000224565b8281528582848701011115620002b057600080fd5b60005b83811015620002d0578581018301518282018401528201620002b3565b506000928101909101919091529392505050565b600060e08284031215620002f757600080fd5b62000301620001f9565b82519091506001600160401b03808211156200031c57600080fd5b6200032a8583860162000257565b83526020840151602084015260408401519150808211156200034b57600080fd5b620003598583860162000257565b604084015260608401519150808211156200037357600080fd5b620003818583860162000257565b606084015260808401519150808211156200039b57600080fd5b50620003aa8482850162000257565b60808301525060a082015160a082015260c082015160c082015292915050565b80516001600160a01b0381168114620003e257600080fd5b919050565b600082601f830112620003f957600080fd5b815160206001600160401b03821115620004175762000417620001e3565b8160051b6200042882820162000224565b92835284810182019282810190878511156200044357600080fd5b83870192505b84831015620004645782518252918301919083019062000449565b979650505050505050565b600080600080600080600060e0888a0312156200048b57600080fd5b87516001600160401b0380821115620004a357600080fd5b620004b18b838c01620002e4565b9850620004c160208b01620003ca565b975060408a0151915080821115620004d857600080fd5b620004e68b838c0162000257565b965060608a0151915080821115620004fd57600080fd5b6200050b8b838c0162000257565b95506200051b60808b01620003ca565b945060a08a01519150808211156200053257600080fd5b620005408b838c01620003e7565b935060c08a01519150808211156200055757600080fd5b50620005668a828b01620003e7565b91505092959891949750929550565b600181811c908216806200058a57607f821691505b602082108103620005ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005ff57600081815260208120601f850160051c81016020861015620005da5750805b601f850160051c820191505b81811015620005fb57828155600101620005e6565b5050505b505050565b81516001600160401b03811115620006205762000620620001e3565b620006388162000631845462000575565b84620005b1565b602080601f831160018114620006705760008415620006575750858301515b600019600386901b1c1916600185901b178555620005fb565b600085815260208120601f198616915b82811015620006a15788860151825594840194600190910190840162000680565b5085821015620006c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620007125762000712620006e6565b92915050565b6000600182016200072d576200072d620006e6565b5060010190565b6126a380620007446000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c806373d4a13a116100b8578063a22cb4651161007c578063a22cb4651461031f578063af09565114610332578063c4a9d1171461034a578063e5a69ed114610352578063e985e9c51461035a578063f242432a1461039657600080fd5b806373d4a13a146102a457806381d76ea4146102bf5780638da5cb5b146102cc5780638fecac83146102f757806395d89b411461031757600080fd5b8063298ec2081161010a578063298ec2081461020957806329a33db51461021e5780632eb2c2d61461023e57806339ada85e14610251578063404b3740146102715780634e1273f41461028457600080fd5b8062fdd58e14610146578063013b60fa1461016c57806301ffc9a7146101be57806306fdde03146101e15780630e89341c146101f6575b600080fd5b610159610154366004611caf565b6103a9565b6040519081526020015b60405180910390f35b6101a361017a366004611cd9565b600090815260076020908152604080832054600983528184205460089093529220549192909190565b60408051938452602084019290925290820152606001610163565b6101d16101cc366004611d0b565b610442565b6040519015158152602001610163565b6101e9610492565b6040516101639190611d75565b6101e9610204366004611cd9565b610520565b61021c610217366004611d88565b6105b4565b005b61015961022c366004611cd9565b60009081526009602052604090205490565b61021c61024c366004611ef6565b610743565b61015961025f366004611cd9565b60009081526008602052604090205490565b61021c61027f366004611d88565b61078f565b610297610292366004611fa0565b610972565b60405161016391906120a6565b6102ac610a9c565b60405161016397969594939291906120b9565b601054600f5410156101d1565b6003546102df906001600160a01b031681565b6040516001600160a01b039091168152602001610163565b610159610305366004611cd9565b60009081526007602052604090205490565b6101e9610cea565b61021c61032d366004612131565b610cf7565b61033a610d06565b6040516101639493929190612168565b6101d1611101565b61021c611125565b6101d1610368366004612248565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61021c6103a436600461227b565b6112d0565b60006001600160a01b0383166104195760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061047357506001600160e01b031982166303a24d0760e21b145b8061043c57506301ffc9a760e01b6001600160e01b031983161461043c565b6004805461049f906122e0565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906122e0565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b505050505081565b60606002805461052f906122e0565b80601f016020809104026020016040519081016040528092919081815260200182805461055b906122e0565b80156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b50505050509050919050565b600654600083815260076020526040908190205490516370a0823160e01b81523360048201526001600160a01b039092169182906370a0823190602401602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610632919061231a565b10156106745760405162461bcd60e51b8152602060048201526011602482015270646f6e7420686176652062616c616e636560781b6044820152606401610410565b60008381526007602052604081205461068e908490612349565b6040516323b872dd60e01b8152336004820152306024820152604481018290529091506000906001600160a01b038416906323b872dd906064016020604051808303816000875af11580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190612360565b90508061071757600080fd5b610722338686611315565b81600a6005016000828254610737919061237d565b90915550505050505050565b6001600160a01b03851633148061075f575061075f8533610368565b61077b5760405162461bcd60e51b815260040161041090612390565b61078885858585856113bf565b5050505050565b6006546001600160a01b0316816107a633856103a9565b11156108035760405162461bcd60e51b815260206004820152602660248201527f4552524f3a207175616e7469646164652070617261206f20736171756520696e60448201526576616c69646160d01b6064820152608401610410565b601054600f541061086f5760405162461bcd60e51b815260206004820152603060248201527f4552524f3a206576656e746f2076696162696c697a61646f2c206578746f726e60448201526f1bc81b985bc819481c1bdcdcda5d995b60821b6064820152608401610410565b600b544210156108da5760405162461bcd60e51b815260206004820152603060248201527f4552524f3a206f206576656e746f2061696e6461206e616f206174696e67697560448201526f207375612064617461206c696d69746560801b6064820152608401610410565b6000838152600760205260408120546108f4908490612349565b905061090133858561159c565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190612360565b606081518351146109d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610410565b6000835167ffffffffffffffff8111156109f3576109f3611daa565b604051908082528060200260200182016040528015610a1c578160200160208202803683370190505b50905060005b8451811015610a9457610a67858281518110610a4057610a406123de565b6020026020010151858381518110610a5a57610a5a6123de565b60200260200101516103a9565b828281518110610a7957610a796123de565b6020908102919091010152610a8d816123f4565b9050610a22565b509392505050565b600a80548190610aab906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad7906122e0565b8015610b245780601f10610af957610100808354040283529160200191610b24565b820191906000526020600020905b815481529060010190602001808311610b0757829003601f168201915b505050505090806001015490806002018054610b3f906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b906122e0565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b505050505090806003018054610bcd906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf9906122e0565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050505090806004018054610c5b906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c87906122e0565b8015610cd45780601f10610ca957610100808354040283529160200191610cd4565b820191906000526020600020905b815481529060010190602001808311610cb757829003601f168201915b5050505050908060050154908060060154905087565b6005805461049f906122e0565b610d0233838361171d565b5050565b610d466040518060e00160405280606081526020016000815260200160608152602001606081526020016060815260200160008152602001600081525090565b6000606080600a600360009054906101000a90046001600160a01b031660046005836040518060e0016040529081600082018054610d83906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610daf906122e0565b8015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b5050505050815260200160018201548152602001600282018054610e1f906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4b906122e0565b8015610e985780601f10610e6d57610100808354040283529160200191610e98565b820191906000526020600020905b815481529060010190602001808311610e7b57829003601f168201915b50505050508152602001600382018054610eb1906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610edd906122e0565b8015610f2a5780601f10610eff57610100808354040283529160200191610f2a565b820191906000526020600020905b815481529060010190602001808311610f0d57829003601f168201915b50505050508152602001600482018054610f43906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6f906122e0565b8015610fbc5780601f10610f9157610100808354040283529160200191610fbc565b820191906000526020600020905b815481529060010190602001808311610f9f57829003601f168201915b50505050508152602001600582015481526020016006820154815250509350818054610fe7906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054611013906122e0565b80156110605780601f1061103557610100808354040283529160200191611060565b820191906000526020600020905b81548152906001019060200180831161104357829003601f168201915b50505050509150808054611073906122e0565b80601f016020809104026020016040519081016040528092919081815260200182805461109f906122e0565b80156110ec5780601f106110c1576101008083540402835291602001916110ec565b820191906000526020600020905b8154815290600101906020018083116110cf57829003601f168201915b50505050509050935093509350935090919293565b601054600f54600b546000929091109042101581801561111e5750805b9250505090565b6003546001600160a01b0316331461116e5760405162461bcd60e51b815260206004820152600c60248201526b22a929279d1010b7bbb732b960a11b6044820152606401610410565b600654601054600f546001600160a01b039092169110156111e75760405162461bcd60e51b815260206004820152602d60248201527f4552524f3a20746f74616c206120736572206172726563616461646f206e616f60448201526c20666f69206174696e6769646f60981b6064820152608401610410565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561122e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611252919061231a565b60035460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925083169063a9059cbb906044016020604051808303816000875af11580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb9190612360565b505050565b6001600160a01b0385163314806112ec57506112ec8533610368565b6113085760405162461bcd60e51b815260040161041090612390565b61078885858585856117fd565b60008281526008602090815260408083205460099092529091205461133b90839061237d565b111561137f5760405162461bcd60e51b81526020600482015260136024820152724552524f3a204c6f7465206573676f7461646f60681b6044820152606401610410565b6000828152600960205260408120805483929061139d90849061237d565b925050819055506112cb83838360405180602001604052806000815250611927565b81518351146114215760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610410565b6001600160a01b0384166114475760405162461bcd60e51b81526004016104109061240d565b3360005b845181101561152e576000858281518110611468576114686123de565b602002602001015190506000858381518110611486576114866123de565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156114d65760405162461bcd60e51b815260040161041090612452565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061151390849061237d565b9250508190555050505080611527906123f4565b905061144b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161157e92919061249c565b60405180910390a4611594818787878787611a32565b505050505050565b6001600160a01b0383166115fe5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610410565b33600061160a84611b8d565b9050600061161784611b8d565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156116a05760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610410565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b816001600160a01b0316836001600160a01b0316036117905760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610410565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166118235760405162461bcd60e51b81526004016104109061240d565b33600061182f85611b8d565b9050600061183c85611b8d565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561187f5760405162461bcd60e51b815260040161041090612452565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906118bc90849061237d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461191c848a8a8a8a8a611bd8565b505050505050505050565b6001600160a01b0384166119875760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610410565b33600061199385611b8d565b905060006119a085611b8d565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906119d290849061237d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461171483600089898989611bd8565b6001600160a01b0384163b156115945760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611a7690899089908890889088906004016124ca565b6020604051808303816000875af1925050508015611ab1575060408051601f3d908101601f19168201909252611aae91810190612528565b60015b611b5d57611abd612545565b806308c379a003611af65750611ad1612561565b80611adc5750611af8565b8060405162461bcd60e51b81526004016104109190611d75565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610410565b6001600160e01b0319811663bc197c8160e01b146117145760405162461bcd60e51b8152600401610410906125eb565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bc757611bc76123de565b602090810291909101015292915050565b6001600160a01b0384163b156115945760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611c1c9089908990889088908890600401612633565b6020604051808303816000875af1925050508015611c57575060408051601f3d908101601f19168201909252611c5491810190612528565b60015b611c6357611abd612545565b6001600160e01b0319811663f23a6e6160e01b146117145760405162461bcd60e51b8152600401610410906125eb565b80356001600160a01b0381168114611caa57600080fd5b919050565b60008060408385031215611cc257600080fd5b611ccb83611c93565b946020939093013593505050565b600060208284031215611ceb57600080fd5b5035919050565b6001600160e01b031981168114611d0857600080fd5b50565b600060208284031215611d1d57600080fd5b8135611d2881611cf2565b9392505050565b6000815180845260005b81811015611d5557602081850181015186830182015201611d39565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d286020830184611d2f565b60008060408385031215611d9b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611de657611de6611daa565b6040525050565b600067ffffffffffffffff821115611e0757611e07611daa565b5060051b60200190565b600082601f830112611e2257600080fd5b81356020611e2f82611ded565b604051611e3c8282611dc0565b83815260059390931b8501820192828101915086841115611e5c57600080fd5b8286015b84811015611e775780358352918301918301611e60565b509695505050505050565b600082601f830112611e9357600080fd5b813567ffffffffffffffff811115611ead57611ead611daa565b604051611ec4601f8301601f191660200182611dc0565b818152846020838601011115611ed957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611f0e57600080fd5b611f1786611c93565b9450611f2560208701611c93565b9350604086013567ffffffffffffffff80821115611f4257600080fd5b611f4e89838a01611e11565b94506060880135915080821115611f6457600080fd5b611f7089838a01611e11565b93506080880135915080821115611f8657600080fd5b50611f9388828901611e82565b9150509295509295909350565b60008060408385031215611fb357600080fd5b823567ffffffffffffffff80821115611fcb57600080fd5b818501915085601f830112611fdf57600080fd5b81356020611fec82611ded565b604051611ff98282611dc0565b83815260059390931b850182019282810191508984111561201957600080fd5b948201945b8386101561203e5761202f86611c93565b8252948201949082019061201e565b9650508601359250508082111561205457600080fd5b5061206185828601611e11565b9150509250929050565b600081518084526020808501945080840160005b8381101561209b5781518752958201959082019060010161207f565b509495945050505050565b602081526000611d28602083018461206b565b60e0815260006120cc60e083018a611d2f565b88602084015282810360408401526120e48189611d2f565b905082810360608401526120f88188611d2f565b9050828103608084015261210c8187611d2f565b60a0840195909552505060c0015295945050505050565b8015158114611d0857600080fd5b6000806040838503121561214457600080fd5b61214d83611c93565b9150602083013561215d81612123565b809150509250929050565b608081526000855160e06080840152612185610160840182611d2f565b9050602087015160a08401526040870151607f19808584030160c08601526121ad8383611d2f565b925060608901519150808584030160e08601526121ca8383611d2f565b9250608089015191508085840301610100860152506121e98282611d2f565b91505060a087015161012084015260c087015161014084015261221760208401876001600160a01b03169052565b82810360408401526122298186611d2f565b9050828103606084015261223d8185611d2f565b979650505050505050565b6000806040838503121561225b57600080fd5b61226483611c93565b915061227260208401611c93565b90509250929050565b600080600080600060a0868803121561229357600080fd5b61229c86611c93565b94506122aa60208701611c93565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122d457600080fd5b611f9388828901611e82565b600181811c908216806122f457607f821691505b60208210810361231457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561232c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761043c5761043c612333565b60006020828403121561237257600080fd5b8151611d2881612123565b8082018082111561043c5761043c612333565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161240657612406612333565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006124af604083018561206b565b82810360208401526124c1818561206b565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906124f69083018661206b565b8281036060840152612508818661206b565b9050828103608084015261251c8185611d2f565b98975050505050505050565b60006020828403121561253a57600080fd5b8151611d2881611cf2565b600060033d111561255e5760046000803e5060005160e01c5b90565b600060443d101561256f5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561259f57505050505090565b82850191508151818111156125b75750505050505090565b843d87010160208285010111156125d15750505050505090565b6125e060208286010187611dc0565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061223d90830184611d2f56fea2646970667358221220da05947daf9d7e52b7b355d2fe4db020b11820f7c62b4adc3e2a451a29bd4e5164736f6c63430008140033a2646970667358221220759668bd1bcc9136b792714287aea3cd849b8252053ff0dd063c4e904e15d4c064736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80633a28c0e0146200004b57806367eb08001462000064578063f602808f1462000086575b600080fd5b620000626200005c366004620004ba565b620000ac565b005b6200006e620001a8565b6040516200007d9190620005c1565b60405180910390f35b6200009d6200009736600462000610565b6200020c565b6040519081526020016200007d565b60006040518060e0016040528089600001518152602001620000d28a602001516200020c565b81526020018960400151815260200189606001518152602001896080015181526020018960a0015181526020018960c001518152509050600081888888888888604051620001209062000233565b620001329796959493929190620006af565b604051809103906000f0801580156200014f573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055505050505050505050565b606060008054806020026020016040519081016040528092919081815260200182805480156200020257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001e3575b5050505050905090565b6000806200021e8362015180620007f2565b90506200022c814262000812565b9392505050565b612de7806200082983390190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156200027d576200027d62000241565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620002af57620002af62000241565b604052919050565b600082601f830112620002c957600080fd5b813567ffffffffffffffff811115620002e657620002e662000241565b620002fb601f8201601f191660200162000283565b8181528460208386010111156200031157600080fd5b816020850160208301376000918101602001919091529392505050565b600060e082840312156200034157600080fd5b6200034b62000257565b9050813567ffffffffffffffff808211156200036657600080fd5b6200037485838601620002b7565b83526020840135602084015260408401359150808211156200039557600080fd5b620003a385838601620002b7565b60408401526060840135915080821115620003bd57600080fd5b620003cb85838601620002b7565b60608401526080840135915080821115620003e557600080fd5b50620003f484828501620002b7565b60808301525060a082013560a082015260c082013560c082015292915050565b80356001600160a01b03811681146200042c57600080fd5b919050565b600082601f8301126200044357600080fd5b8135602067ffffffffffffffff82111562000462576200046262000241565b8160051b6200047382820162000283565b92835284810182019282810190878511156200048e57600080fd5b83870192505b84831015620004af5782358252918301919083019062000494565b979650505050505050565b600080600080600080600060e0888a031215620004d657600080fd5b873567ffffffffffffffff80821115620004ef57600080fd5b620004fd8b838c016200032e565b98506200050d60208b0162000414565b975060408a01359150808211156200052457600080fd5b620005328b838c01620002b7565b965060608a01359150808211156200054957600080fd5b620005578b838c01620002b7565b95506200056760808b0162000414565b945060a08a01359150808211156200057e57600080fd5b6200058c8b838c0162000431565b935060c08a0135915080821115620005a357600080fd5b50620005b28a828b0162000431565b91505092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015620006045783516001600160a01b031683529284019291840191600101620005dd565b50909695505050505050565b6000602082840312156200062357600080fd5b5035919050565b6000815180845260005b81811015620006525760208185018101518683018201520162000634565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015620006a45781518752958201959082019060010162000686565b509495945050505050565b60e081526000885160e080840152620006cd6101c08401826200062a565b905060208a015161010084015260408a015160df198085840301610120860152620006f983836200062a565b925060608c0151915080858403016101408601526200071983836200062a565b925060808c015191508085840301610160860152506200073a82826200062a565b91505060a08a015161018084015260c08a01516101a084015262000769602084018a6001600160a01b03169052565b82810360408401526200077d81896200062a565b905082810360608401526200079381886200062a565b6001600160a01b0387166080850152905082810360a0840152620007b8818662000672565b905082810360c0840152620007ce818562000672565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200080c576200080c620007dc565b92915050565b808201808211156200080c576200080c620007dc56fe60806040523480156200001157600080fd5b5060405162002de738038062002de783398101604081905262000034916200046f565b6040805160208101909152600081526200004e81620001d1565b5086518790600a90819062000064908262000604565b50602082015160018201556040820151600282019062000085908262000604565b50606082015160038201906200009c908262000604565b5060808201516004820190620000b3908262000604565b5060a0820151600582015560c090910151600690910155600380546001600160a01b0319166001600160a01b0388161790556004620000f3868262000604565b50600562000102858262000604565b50600680546001600160a01b0319166001600160a01b03851617905560005b8251811015620001c357828181518110620001405762000140620006d0565b6020026020010151600760008360016200015b9190620006fc565b815260200190815260200160002081905550818181518110620001825762000182620006d0565b6020026020010151600860008360016200019d9190620006fc565b815260208101919091526040016000205580620001ba8162000718565b91505062000121565b505050505050505062000734565b6002620001df828262000604565b5050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156200021e576200021e620001e3565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200024f576200024f620001e3565b604052919050565b600082601f8301126200026957600080fd5b81516001600160401b03811115620002855762000285620001e3565b60206200029b601f8301601f1916820162000224565b8281528582848701011115620002b057600080fd5b60005b83811015620002d0578581018301518282018401528201620002b3565b506000928101909101919091529392505050565b600060e08284031215620002f757600080fd5b62000301620001f9565b82519091506001600160401b03808211156200031c57600080fd5b6200032a8583860162000257565b83526020840151602084015260408401519150808211156200034b57600080fd5b620003598583860162000257565b604084015260608401519150808211156200037357600080fd5b620003818583860162000257565b606084015260808401519150808211156200039b57600080fd5b50620003aa8482850162000257565b60808301525060a082015160a082015260c082015160c082015292915050565b80516001600160a01b0381168114620003e257600080fd5b919050565b600082601f830112620003f957600080fd5b815160206001600160401b03821115620004175762000417620001e3565b8160051b6200042882820162000224565b92835284810182019282810190878511156200044357600080fd5b83870192505b84831015620004645782518252918301919083019062000449565b979650505050505050565b600080600080600080600060e0888a0312156200048b57600080fd5b87516001600160401b0380821115620004a357600080fd5b620004b18b838c01620002e4565b9850620004c160208b01620003ca565b975060408a0151915080821115620004d857600080fd5b620004e68b838c0162000257565b965060608a0151915080821115620004fd57600080fd5b6200050b8b838c0162000257565b95506200051b60808b01620003ca565b945060a08a01519150808211156200053257600080fd5b620005408b838c01620003e7565b935060c08a01519150808211156200055757600080fd5b50620005668a828b01620003e7565b91505092959891949750929550565b600181811c908216806200058a57607f821691505b602082108103620005ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005ff57600081815260208120601f850160051c81016020861015620005da5750805b601f850160051c820191505b81811015620005fb57828155600101620005e6565b5050505b505050565b81516001600160401b03811115620006205762000620620001e3565b620006388162000631845462000575565b84620005b1565b602080601f831160018114620006705760008415620006575750858301515b600019600386901b1c1916600185901b178555620005fb565b600085815260208120601f198616915b82811015620006a15788860151825594840194600190910190840162000680565b5085821015620006c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620007125762000712620006e6565b92915050565b6000600182016200072d576200072d620006e6565b5060010190565b6126a380620007446000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c806373d4a13a116100b8578063a22cb4651161007c578063a22cb4651461031f578063af09565114610332578063c4a9d1171461034a578063e5a69ed114610352578063e985e9c51461035a578063f242432a1461039657600080fd5b806373d4a13a146102a457806381d76ea4146102bf5780638da5cb5b146102cc5780638fecac83146102f757806395d89b411461031757600080fd5b8063298ec2081161010a578063298ec2081461020957806329a33db51461021e5780632eb2c2d61461023e57806339ada85e14610251578063404b3740146102715780634e1273f41461028457600080fd5b8062fdd58e14610146578063013b60fa1461016c57806301ffc9a7146101be57806306fdde03146101e15780630e89341c146101f6575b600080fd5b610159610154366004611caf565b6103a9565b6040519081526020015b60405180910390f35b6101a361017a366004611cd9565b600090815260076020908152604080832054600983528184205460089093529220549192909190565b60408051938452602084019290925290820152606001610163565b6101d16101cc366004611d0b565b610442565b6040519015158152602001610163565b6101e9610492565b6040516101639190611d75565b6101e9610204366004611cd9565b610520565b61021c610217366004611d88565b6105b4565b005b61015961022c366004611cd9565b60009081526009602052604090205490565b61021c61024c366004611ef6565b610743565b61015961025f366004611cd9565b60009081526008602052604090205490565b61021c61027f366004611d88565b61078f565b610297610292366004611fa0565b610972565b60405161016391906120a6565b6102ac610a9c565b60405161016397969594939291906120b9565b601054600f5410156101d1565b6003546102df906001600160a01b031681565b6040516001600160a01b039091168152602001610163565b610159610305366004611cd9565b60009081526007602052604090205490565b6101e9610cea565b61021c61032d366004612131565b610cf7565b61033a610d06565b6040516101639493929190612168565b6101d1611101565b61021c611125565b6101d1610368366004612248565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61021c6103a436600461227b565b6112d0565b60006001600160a01b0383166104195760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061047357506001600160e01b031982166303a24d0760e21b145b8061043c57506301ffc9a760e01b6001600160e01b031983161461043c565b6004805461049f906122e0565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906122e0565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b505050505081565b60606002805461052f906122e0565b80601f016020809104026020016040519081016040528092919081815260200182805461055b906122e0565b80156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b50505050509050919050565b600654600083815260076020526040908190205490516370a0823160e01b81523360048201526001600160a01b039092169182906370a0823190602401602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610632919061231a565b10156106745760405162461bcd60e51b8152602060048201526011602482015270646f6e7420686176652062616c616e636560781b6044820152606401610410565b60008381526007602052604081205461068e908490612349565b6040516323b872dd60e01b8152336004820152306024820152604481018290529091506000906001600160a01b038416906323b872dd906064016020604051808303816000875af11580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190612360565b90508061071757600080fd5b610722338686611315565b81600a6005016000828254610737919061237d565b90915550505050505050565b6001600160a01b03851633148061075f575061075f8533610368565b61077b5760405162461bcd60e51b815260040161041090612390565b61078885858585856113bf565b5050505050565b6006546001600160a01b0316816107a633856103a9565b11156108035760405162461bcd60e51b815260206004820152602660248201527f4552524f3a207175616e7469646164652070617261206f20736171756520696e60448201526576616c69646160d01b6064820152608401610410565b601054600f541061086f5760405162461bcd60e51b815260206004820152603060248201527f4552524f3a206576656e746f2076696162696c697a61646f2c206578746f726e60448201526f1bc81b985bc819481c1bdcdcda5d995b60821b6064820152608401610410565b600b544210156108da5760405162461bcd60e51b815260206004820152603060248201527f4552524f3a206f206576656e746f2061696e6461206e616f206174696e67697560448201526f207375612064617461206c696d69746560801b6064820152608401610410565b6000838152600760205260408120546108f4908490612349565b905061090133858561159c565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190612360565b606081518351146109d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610410565b6000835167ffffffffffffffff8111156109f3576109f3611daa565b604051908082528060200260200182016040528015610a1c578160200160208202803683370190505b50905060005b8451811015610a9457610a67858281518110610a4057610a406123de565b6020026020010151858381518110610a5a57610a5a6123de565b60200260200101516103a9565b828281518110610a7957610a796123de565b6020908102919091010152610a8d816123f4565b9050610a22565b509392505050565b600a80548190610aab906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad7906122e0565b8015610b245780601f10610af957610100808354040283529160200191610b24565b820191906000526020600020905b815481529060010190602001808311610b0757829003601f168201915b505050505090806001015490806002018054610b3f906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b906122e0565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b505050505090806003018054610bcd906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf9906122e0565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050505090806004018054610c5b906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c87906122e0565b8015610cd45780601f10610ca957610100808354040283529160200191610cd4565b820191906000526020600020905b815481529060010190602001808311610cb757829003601f168201915b5050505050908060050154908060060154905087565b6005805461049f906122e0565b610d0233838361171d565b5050565b610d466040518060e00160405280606081526020016000815260200160608152602001606081526020016060815260200160008152602001600081525090565b6000606080600a600360009054906101000a90046001600160a01b031660046005836040518060e0016040529081600082018054610d83906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610daf906122e0565b8015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b5050505050815260200160018201548152602001600282018054610e1f906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4b906122e0565b8015610e985780601f10610e6d57610100808354040283529160200191610e98565b820191906000526020600020905b815481529060010190602001808311610e7b57829003601f168201915b50505050508152602001600382018054610eb1906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610edd906122e0565b8015610f2a5780601f10610eff57610100808354040283529160200191610f2a565b820191906000526020600020905b815481529060010190602001808311610f0d57829003601f168201915b50505050508152602001600482018054610f43906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6f906122e0565b8015610fbc5780601f10610f9157610100808354040283529160200191610fbc565b820191906000526020600020905b815481529060010190602001808311610f9f57829003601f168201915b50505050508152602001600582015481526020016006820154815250509350818054610fe7906122e0565b80601f0160208091040260200160405190810160405280929190818152602001828054611013906122e0565b80156110605780601f1061103557610100808354040283529160200191611060565b820191906000526020600020905b81548152906001019060200180831161104357829003601f168201915b50505050509150808054611073906122e0565b80601f016020809104026020016040519081016040528092919081815260200182805461109f906122e0565b80156110ec5780601f106110c1576101008083540402835291602001916110ec565b820191906000526020600020905b8154815290600101906020018083116110cf57829003601f168201915b50505050509050935093509350935090919293565b601054600f54600b546000929091109042101581801561111e5750805b9250505090565b6003546001600160a01b0316331461116e5760405162461bcd60e51b815260206004820152600c60248201526b22a929279d1010b7bbb732b960a11b6044820152606401610410565b600654601054600f546001600160a01b039092169110156111e75760405162461bcd60e51b815260206004820152602d60248201527f4552524f3a20746f74616c206120736572206172726563616461646f206e616f60448201526c20666f69206174696e6769646f60981b6064820152608401610410565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561122e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611252919061231a565b60035460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925083169063a9059cbb906044016020604051808303816000875af11580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb9190612360565b505050565b6001600160a01b0385163314806112ec57506112ec8533610368565b6113085760405162461bcd60e51b815260040161041090612390565b61078885858585856117fd565b60008281526008602090815260408083205460099092529091205461133b90839061237d565b111561137f5760405162461bcd60e51b81526020600482015260136024820152724552524f3a204c6f7465206573676f7461646f60681b6044820152606401610410565b6000828152600960205260408120805483929061139d90849061237d565b925050819055506112cb83838360405180602001604052806000815250611927565b81518351146114215760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610410565b6001600160a01b0384166114475760405162461bcd60e51b81526004016104109061240d565b3360005b845181101561152e576000858281518110611468576114686123de565b602002602001015190506000858381518110611486576114866123de565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156114d65760405162461bcd60e51b815260040161041090612452565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061151390849061237d565b9250508190555050505080611527906123f4565b905061144b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161157e92919061249c565b60405180910390a4611594818787878787611a32565b505050505050565b6001600160a01b0383166115fe5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610410565b33600061160a84611b8d565b9050600061161784611b8d565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156116a05760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610410565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b816001600160a01b0316836001600160a01b0316036117905760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610410565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166118235760405162461bcd60e51b81526004016104109061240d565b33600061182f85611b8d565b9050600061183c85611b8d565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561187f5760405162461bcd60e51b815260040161041090612452565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906118bc90849061237d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461191c848a8a8a8a8a611bd8565b505050505050505050565b6001600160a01b0384166119875760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610410565b33600061199385611b8d565b905060006119a085611b8d565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906119d290849061237d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461171483600089898989611bd8565b6001600160a01b0384163b156115945760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611a7690899089908890889088906004016124ca565b6020604051808303816000875af1925050508015611ab1575060408051601f3d908101601f19168201909252611aae91810190612528565b60015b611b5d57611abd612545565b806308c379a003611af65750611ad1612561565b80611adc5750611af8565b8060405162461bcd60e51b81526004016104109190611d75565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610410565b6001600160e01b0319811663bc197c8160e01b146117145760405162461bcd60e51b8152600401610410906125eb565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bc757611bc76123de565b602090810291909101015292915050565b6001600160a01b0384163b156115945760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611c1c9089908990889088908890600401612633565b6020604051808303816000875af1925050508015611c57575060408051601f3d908101601f19168201909252611c5491810190612528565b60015b611c6357611abd612545565b6001600160e01b0319811663f23a6e6160e01b146117145760405162461bcd60e51b8152600401610410906125eb565b80356001600160a01b0381168114611caa57600080fd5b919050565b60008060408385031215611cc257600080fd5b611ccb83611c93565b946020939093013593505050565b600060208284031215611ceb57600080fd5b5035919050565b6001600160e01b031981168114611d0857600080fd5b50565b600060208284031215611d1d57600080fd5b8135611d2881611cf2565b9392505050565b6000815180845260005b81811015611d5557602081850181015186830182015201611d39565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d286020830184611d2f565b60008060408385031215611d9b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611de657611de6611daa565b6040525050565b600067ffffffffffffffff821115611e0757611e07611daa565b5060051b60200190565b600082601f830112611e2257600080fd5b81356020611e2f82611ded565b604051611e3c8282611dc0565b83815260059390931b8501820192828101915086841115611e5c57600080fd5b8286015b84811015611e775780358352918301918301611e60565b509695505050505050565b600082601f830112611e9357600080fd5b813567ffffffffffffffff811115611ead57611ead611daa565b604051611ec4601f8301601f191660200182611dc0565b818152846020838601011115611ed957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611f0e57600080fd5b611f1786611c93565b9450611f2560208701611c93565b9350604086013567ffffffffffffffff80821115611f4257600080fd5b611f4e89838a01611e11565b94506060880135915080821115611f6457600080fd5b611f7089838a01611e11565b93506080880135915080821115611f8657600080fd5b50611f9388828901611e82565b9150509295509295909350565b60008060408385031215611fb357600080fd5b823567ffffffffffffffff80821115611fcb57600080fd5b818501915085601f830112611fdf57600080fd5b81356020611fec82611ded565b604051611ff98282611dc0565b83815260059390931b850182019282810191508984111561201957600080fd5b948201945b8386101561203e5761202f86611c93565b8252948201949082019061201e565b9650508601359250508082111561205457600080fd5b5061206185828601611e11565b9150509250929050565b600081518084526020808501945080840160005b8381101561209b5781518752958201959082019060010161207f565b509495945050505050565b602081526000611d28602083018461206b565b60e0815260006120cc60e083018a611d2f565b88602084015282810360408401526120e48189611d2f565b905082810360608401526120f88188611d2f565b9050828103608084015261210c8187611d2f565b60a0840195909552505060c0015295945050505050565b8015158114611d0857600080fd5b6000806040838503121561214457600080fd5b61214d83611c93565b9150602083013561215d81612123565b809150509250929050565b608081526000855160e06080840152612185610160840182611d2f565b9050602087015160a08401526040870151607f19808584030160c08601526121ad8383611d2f565b925060608901519150808584030160e08601526121ca8383611d2f565b9250608089015191508085840301610100860152506121e98282611d2f565b91505060a087015161012084015260c087015161014084015261221760208401876001600160a01b03169052565b82810360408401526122298186611d2f565b9050828103606084015261223d8185611d2f565b979650505050505050565b6000806040838503121561225b57600080fd5b61226483611c93565b915061227260208401611c93565b90509250929050565b600080600080600060a0868803121561229357600080fd5b61229c86611c93565b94506122aa60208701611c93565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122d457600080fd5b611f9388828901611e82565b600181811c908216806122f457607f821691505b60208210810361231457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561232c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761043c5761043c612333565b60006020828403121561237257600080fd5b8151611d2881612123565b8082018082111561043c5761043c612333565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161240657612406612333565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006124af604083018561206b565b82810360208401526124c1818561206b565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906124f69083018661206b565b8281036060840152612508818661206b565b9050828103608084015261251c8185611d2f565b98975050505050505050565b60006020828403121561253a57600080fd5b8151611d2881611cf2565b600060033d111561255e5760046000803e5060005160e01c5b90565b600060443d101561256f5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561259f57505050505090565b82850191508151818111156125b75750505050505090565b843d87010160208285010111156125d15750505050505090565b6125e060208286010187611dc0565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061223d90830184611d2f56fea2646970667358221220da05947daf9d7e52b7b355d2fe4db020b11820f7c62b4adc3e2a451a29bd4e5164736f6c63430008140033a2646970667358221220759668bd1bcc9136b792714287aea3cd849b8252053ff0dd063c4e904e15d4c064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2939,
        "contract": "contracts/Contract.sol:factoryERC1155",
        "label": "collections",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}